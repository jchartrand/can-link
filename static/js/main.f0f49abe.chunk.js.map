{"version":3,"sources":["hooks/useFetch.js","App.js","serviceWorker.js","index.js"],"names":["dataFetchReducer","state","action","type","isLoading","isError","data","payload","Error","useDataApi","initialUrl","initialData","useState","url","setUrl","useReducer","dispatch","useEffect","didCancel","a","axios","get","result","fetchData","STYLES","SVG","stroke","strokeWidth","strokeOpacity","DOM","border","mapStyle","height","width","MODE","dataForXYPlot","x","y","dataForTreemap","App","modeIndex","setModeIndex","useSVG","setUseSVG","updateModeIndex","increment","newIndex","length","query","setQuery","useFetch","hits","doFetch","className","style","Map","center","zoom","TileLayer","attribution","Marker","position","Popup","onSubmit","event","preventDefault","value","onChange","target","map","item","key","objectID","href","title","onClick","animation","colorType","colorRange","D3FlareData","mode","renderMode","margin","getSize","d","getColor","hex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0f49abe.chunk.js","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { \n        ...state, \n        isLoading: true, \n        isError: false \n    };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n\n      try {\n        const result = await axios.get(url\n  /*           , {\n        params: {\n            \"$limit\": 500,\n            \"$$app_token\": \"Q0LRjhQpVZUFOsM8LGh0tm3kx\"\n        }\n      } */)\n\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  return [state, setUrl];\n};\n\nexport default useDataApi;\n\n\n","import React, {useState, Fragment} from 'react';\nimport './App.css';\n//import Solr from './helpers/Solr';\nimport useFetch from './hooks/useFetch'\nimport {XYPlot, LineSeries, Treemap} from 'react-vis';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\n\nimport '../node_modules/react-vis/dist/style.css';\n//import '../node_modules/leaflet/dist/leaflet.css'\nimport D3FlareData from './datasets/d3-flare-example.json';\n\n///const SOCRATA_API_KEY_ID = \"9jhwf7q6yj994h6yg3e7do8m4\"\n//const SOCRATA_API_KEY_SECRET = \"39d7bzmbf7vmoiolc5lgyb7lcbp5an2qxe2gf5cqt6veoxmivr\"\n\nconst STYLES = {\n  SVG: {\n    stroke: '#ddd',\n    strokeWidth: '0.25',\n    strokeOpacity: 0.5\n  },\n  DOM: {\n    border: 'thin solid #ddd'\n  }\n};\n\nconst mapStyle = {\n  height: '600px',\n  width: '100%'\n};\n\nconst MODE = [\n  'circlePack',\n  'partition',\n  'partition-pivot',\n  'squarify',\n  'resquarify',\n  'slice',\n  'dice',\n  'slicedice',\n  'binary'\n];\n\nconst dataForXYPlot = [\n  {x: 0, y: 8},\n  {x: 1, y: 5},\n  {x: 2, y: 4},\n  {x: 3, y: 9},\n  {x: 4, y: 1},\n  {x: 5, y: 7},\n  {x: 6, y: 6},\n  {x: 7, y: 3},\n  {x: 8, y: 2},\n  {x: 9, y: 0}\n];\n\nconst dataForTreemap = {\n  \"title\": \"analytics\",\n  \"color\": \"#12939A\",\n  \"children\": [\n   {\n    \"title\": \"cluster\",\n    \"children\": [\n     {\"title\": \"AgglomerativeCluster\", \"color\": \"#12939A\", \"size\": 3938},\n     {\"title\": \"CommunityStructure\", \"color\": \"#12939A\", \"size\": 3812},\n     {\"title\": \"HierarchicalCluster\", \"color\": \"#12939A\", \"size\": 6714},\n     {\"title\": \"MergeEdge\", \"color\": \"#12939A\", \"size\": 743}\n    ]\n   },\n   {\n    \"title\": \"graph\",\n    \"children\": [\n     {\"title\": \"BetweennessCentrality\", \"color\": \"#12939A\", \"size\": 3534},\n     {\"title\": \"LinkDistance\", \"color\": \"#12939A\", \"size\": 5731},\n     {\"title\": \"MaxFlowMinCut\", \"color\": \"#12939A\", \"size\": 7840},\n     {\"title\": \"ShortestPaths\", \"color\": \"#12939A\", \"size\": 5914},\n     {\"title\": \"SpanningTree\", \"color\": \"#12939A\", \"size\": 3416}\n    ]\n   },\n   {\n    \"title\": \"optimization\",\n    \"children\": [\n     {\"title\": \"AspectRatioBanker\", \"color\": \"#12939A\", \"size\": 7074}\n    ]\n   }\n  ]\n }\n\nfunction App() {\n\n  const [modeIndex, setModeIndex] = useState(0);\n  const [useSVG, setUseSVG] = useState(true)\n\n  const updateModeIndex = increment => {\n    const newIndex = modeIndex + (increment ? 1 : -1);\n    setModeIndex(newIndex < 0 ? MODE.length - 1 : newIndex >= MODE.length ? 0 : newIndex);\n  };\n\n  const [query, setQuery] = useState('redux');\n  const [{ data, isLoading, isError }, doFetch] = useFetch(\n    'https://hn.algolia.com/api/v1/search?query=redux',\n    { hits: [] },\n  );\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n       Can-Link\n\n       \n      </header>\n\n      <div style={mapStyle}>\n          <Map center={[51.505, -0.09]} zoom={13}>\n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            />\n            <Marker position={[51.505, -0.09]}>\n              <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n            </Marker>\n          </Map>\n        </div>\n \n    <Fragment>\n      <form\n        onSubmit={event => {\n          doFetch(\n            `http://hn.algolia.com/api/v1/search?query=${query}`,\n          );\n \n          event.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n \n      {isError && <div>Something went wrong ...</div>}\n \n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n\n\n\n\n\n\n\n      <div className=\"App\">\n        <XYPlot height={300} width={300}>\n          <LineSeries data={dataForXYPlot} />\n        </XYPlot>\n      </div>\n\n      <Treemap\n          title={'Your Search Results'}\n          width={300}\n          height={300}\n          data={dataForTreemap}\n          />\n\n\n     <div className=\"centered-and-flexed\">\n        <div className=\"centered-and-flexed-controls\">\n          <button className=\"showcase-button\"\n            onClick={() => setUseSVG(!useSVG)}>\n              {useSVG ? 'USE DOM' : 'USE SVG'}\n          </button>\n        </div>\n        <div className=\"centered-and-flexed-controls\">\n          <button className=\"showcase-button\"\n            onClick={() => updateModeIndex(false)}>\n              PREV MODE\n          </button>\n          <button className=\"showcase-button\"\n            onClick={() => updateModeIndex(true)}>\n              NEXT MODE\n          </button>\n\n\n          <Treemap\n            {...{\n              animation: true,\n              className: 'nested-tree-example',\n              colorType: 'literal',\n              colorRange: ['#88572C'],\n              data: D3FlareData,\n              mode: MODE[modeIndex],\n              renderMode: useSVG ? 'SVG' : 'DOM',\n              height: 300,\n              width: 350,\n              margin: 10,\n              getSize: d => d.value,\n              getColor: d => d.hex,\n              style: STYLES[useSVG ? 'SVG' : 'DOM']\n            }}\n        />\n      </div>\n    </div>\n        \n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}